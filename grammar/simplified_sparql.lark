start: queryunit
queryunit: query
query: selectquery | askquery
selectquery: selectclause whereclause solutionmodifier
selectclause: "SELECT" "DISTINCT"? ( ( var | ( "(" expression "AS" var ")" ) )+ | "*" )
askquery: "ASK" whereclause solutionmodifier
whereclause: "WHERE"? groupgraphpattern
solutionmodifier: groupclause? orderclause? limitclause?
groupclause: "GROUP BY" groupcondition+
groupcondition: builtincall | "(" expression ( "AS" var )? ")" | var
orderclause: "ORDER BY" ordercondition+
ordercondition: ( ( "ASC" | "DESC" ) brackettedexpression ) | ( constraint | var )
limitclause : "LIMIT" integer
offsetclause: "OFFSET" integer
groupgraphpattern: "{" groupgraphpatternsub "}"
groupgraphpatternsub: triplesblock? ( graphpatternnottriples "."? triplesblock? )*
triplesblock: triplessamesubjectpath ( "." triplesblock? )?
graphpatternnottriples: groupgraphpattern | filter
filter: "FILTER" constraint
constraint: brackettedexpression | builtincall
expressionlist: NIL | "(" expression ( "," expression )* ")"
triplessamesubjectpath: varorterm varoriri varorterm
integer: INTEGER
varorterm: var | graphterm
varoriri: var | iri
var: VAR
graphterm: iri | rdfliteral | numericliteral | booleanliteral | NIL
expression: conditionalorexpression
conditionalorexpression: conditionalandexpression ( "||" conditionalandexpression )*
conditionalandexpression: valuelogical ( "&&" valuelogical )*
valuelogical: relationalexpression
relationalexpression: numericexpression ( "=" numericexpression | "!=" numericexpression | "<" numericexpression | ">" numericexpression | "<=" numericexpression | ">=" numericexpression | "IN" expressionlist | "NOT" "IN" expressionlist )?
numericexpression: additiveexpression
additiveexpression: multiplicativeexpression ( "+" multiplicativeexpression | "-" multiplicativeexpression | numericliteral ( ( "*" unaryexpression ) | ( "/" unaryexpression ) )* )*
multiplicativeexpression: unaryexpression ( "*" unaryexpression | "/" unaryexpression )*
unaryexpression: "!" primaryexpression | "+" primaryexpression | "-" primaryexpression | primaryexpression
primaryexpression: brackettedexpression | builtincall | iri | rdfliteral | numericliteral | booleanliteral | var
brackettedexpression: "(" expression ")"
builtincall: aggregate | langexpression | langmatchesexpression | iriexpression | uriexpression | containsexpression | yearexpression | monthexpression | dayexpression | isiriexpression | isuriexpression | isliteralexpression| existsfunc | notexistsfunc
langexpression: "LANG" "(" expression ")"
langmatchesexpression: "LANGMATCHES" "(" expression "," expression ")"
iriexpression: "IRI" "(" expression ")"
uriexpression: "URI" "(" expression ")"
containsexpression: "CONTAINS" "(" expression "," expression ")"
yearexpression: "YEAR" "(" expression ")"
monthexpression: "MONTH" "(" expression ")"
dayexpression: "DAY" "(" expression ")"
isiriexpression: "isIRI" "(" expression ")"
isuriexpression: "isURI" "(" expression ")"
isliteralexpression: "isLITERAL" "(" expression ")"
isnumericexpression: "isNUMERIC" "(" expression ")"
existsfunc: "EXISTS" groupgraphpattern
notexistsfunc: "NOT EXISTS" groupgraphpattern
aggregate: countaggregate | sumaggregate | minaggregate | maxaggregate | avgaggregate
countaggregate: "COUNT" "(" "DISTINCT"? ( "*" | expression ) ")"
sumaggregate: "SUM" "(" "DISTINCT"? expression ")"
minaggregate: "MIN" "(" "DISTINCT"? expression ")"
maxaggregate: "MAX" "(" "DISTINCT"? expression ")"
avgaggregate: "AVG" "(" "DISTINCT"? expression ")"
rdfliteral: STRING
numericliteral: NUMBER
NUMBER: "<number>"
booleanliteral: "true" | "false"
STRING: "<string>"
iri: IRI
IRI: "<iri>"
VAR: "<var>"
INTEGER: "<integer>"
NIL: "<null>"
WS: /[\u0020\u0009\u000D\u000A]/
%ignore WS
COMMENT: "#" /[^\n]/*
%ignore COMMENT